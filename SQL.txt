-- 1. Profiles Table: Stores basic user information, linked to Supabase Auth
CREATE TABLE profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE, -- Links to Supabase auth user
  wallet_address TEXT UNIQUE NOT NULL, -- User's wallet address
  user_type TEXT NOT NULL CHECK (user_type IN ('mentor', 'mentee')), -- Role: 'mentor' or 'mentee'
  name TEXT,
  email TEXT,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  -- Mentor-specific fields (nullable)
  qualifications TEXT,
  bio TEXT,
  profile_picture_url TEXT,
  is_verified BOOLEAN DEFAULT false,
  mentor_price NUMERIC,
  linkedin_url TEXT,
  availability JSONB,
  -- Mentee-specific fields (nullable)
  goals TEXT
);

-- Add index for faster wallet address lookups
CREATE INDEX idx_profiles_wallet_address ON profiles(wallet_address);

-- Function to update updated_at timestamp automatically
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update updated_at on profile update
CREATE TRIGGER set_profiles_timestamp
BEFORE UPDATE ON profiles
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Enable Row Level Security (RLS) for profiles table
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Policy: Users can view their own profile
CREATE POLICY "Users can view their own profile" ON profiles
  FOR SELECT USING (auth.uid() = id);

-- Policy: Users can update their own profile
CREATE POLICY "Users can update their own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

-- Policy: Allow public read access to verified mentor profiles (adjust as needed)
CREATE POLICY "Public can read verified mentor profiles" ON profiles
  FOR SELECT USING (user_type = 'mentor' AND is_verified = true);


-- 2. Interests Table: Stores predefined interests/skills/topics
CREATE TABLE interests (
  id SERIAL PRIMARY KEY,
  name TEXT UNIQUE NOT NULL
);

-- Enable RLS for interests table (optional, depends on access needs)
ALTER TABLE interests ENABLE ROW LEVEL SECURITY;
-- Policy: Allow authenticated users to read interests (adjust as needed)
CREATE POLICY "Authenticated users can read interests" ON interests
  FOR SELECT USING (auth.role() = 'authenticated');


-- 3. Profile Interests Junction Table: Links profiles to their interests
CREATE TABLE profile_interests (
  profile_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  interest_id INTEGER NOT NULL REFERENCES interests(id) ON DELETE CASCADE,
  PRIMARY KEY (profile_id, interest_id) -- Composite primary key
);

-- Enable RLS for profile_interests table
ALTER TABLE profile_interests ENABLE ROW LEVEL SECURITY;
-- Policy: Users can view their own interests
CREATE POLICY "Users can view their own interests" ON profile_interests
  FOR SELECT USING (auth.uid() = profile_id);
-- Policy: Users can manage their own interests
CREATE POLICY "Users can manage their own interests" ON profile_interests
  FOR ALL USING (auth.uid() = profile_id);
-- Policy: Allow reading interests linked to publicly viewable profiles (e.g., verified mentors)
CREATE POLICY "Allow reading interests for public profiles" ON profile_interests
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM profiles p
      WHERE p.id = profile_interests.profile_id
      AND p.user_type = 'mentor' AND p.is_verified = true
    )
  );


-- 4. Mentorships Table: Represents the relationship between a mentor and mentee
CREATE TABLE mentorships (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  mentor_profile_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  mentee_profile_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  status TEXT NOT NULL CHECK (status IN ('pending', 'active', 'completed', 'rejected')) DEFAULT 'pending',
  started_at TIMESTAMPTZ,
  ended_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  CONSTRAINT unique_mentorship_pair UNIQUE (mentor_profile_id, mentee_profile_id) -- Prevent duplicate mentorships
);

-- Add indexes for faster lookups by mentor or mentee
CREATE INDEX idx_mentorships_mentor_id ON mentorships(mentor_profile_id);
CREATE INDEX idx_mentorships_mentee_id ON mentorships(mentee_profile_id);

-- Trigger to update updated_at on mentorship update
CREATE TRIGGER set_mentorships_timestamp
BEFORE UPDATE ON mentorships
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Enable RLS for mentorships table
ALTER TABLE mentorships ENABLE ROW LEVEL SECURITY;
-- Policy: Involved users (mentor or mentee) can view the mentorship
CREATE POLICY "Involved users can view mentorship" ON mentorships
  FOR SELECT USING (auth.uid() = mentor_profile_id OR auth.uid() = mentee_profile_id);
-- Policy: Involved users can update the mentorship (e.g., change status)
CREATE POLICY "Involved users can update mentorship" ON mentorships
  FOR UPDATE USING (auth.uid() = mentor_profile_id OR auth.uid() = mentee_profile_id);
-- Policy: Mentees can create pending mentorship requests
CREATE POLICY "Mentees can create mentorship requests" ON mentorships
  FOR INSERT WITH CHECK (auth.uid() = mentee_profile_id AND status = 'pending');


-- 5. Meetings Table: Stores information about scheduled meetings
CREATE TABLE meetings (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  mentorship_id uuid NOT NULL REFERENCES mentorships(id) ON DELETE CASCADE,
  scheduled_time TIMESTAMPTZ NOT NULL,
  duration_minutes INTEGER,
  status TEXT NOT NULL CHECK (status IN ('scheduled', 'completed', 'cancelled')) DEFAULT 'scheduled',
  meeting_link TEXT, -- Link to video call, etc.
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Add index for faster lookups by mentorship
CREATE INDEX idx_meetings_mentorship_id ON meetings(mentorship_id);

-- Trigger to update updated_at on meeting update
CREATE TRIGGER set_meetings_timestamp
BEFORE UPDATE ON meetings
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Enable RLS for meetings table
ALTER TABLE meetings ENABLE ROW LEVEL SECURITY;
-- Policy: Users involved in the parent mentorship can manage meetings
CREATE POLICY "Involved users can manage meetings" ON meetings
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM mentorships m
      WHERE m.id = meetings.mentorship_id
      AND (auth.uid() = m.mentor_profile_id OR auth.uid() = m.mentee_profile_id)
    )
  );


-- 6. Meeting Chats Table: Stores chat messages within a meeting (optional)
CREATE TABLE meeting_chats (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  meeting_id uuid NOT NULL REFERENCES meetings(id) ON DELETE CASCADE,
  sender_profile_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  message TEXT NOT NULL,
  sent_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Add index for faster lookups by meeting
CREATE INDEX idx_meeting_chats_meeting_id ON meeting_chats(meeting_id);
-- Add index for faster lookups by sender
CREATE INDEX idx_meeting_chats_sender_id ON meeting_chats(sender_profile_id);

-- Enable RLS for meeting_chats table
ALTER TABLE meeting_chats ENABLE ROW LEVEL SECURITY;
-- Policy: Users involved in the parent mentorship can manage chat messages
CREATE POLICY "Involved users can manage meeting chats" ON meeting_chats
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM meetings meet
      JOIN mentorships m ON meet.mentorship_id = m.id
      WHERE meet.id = meeting_chats.meeting_id
      AND (auth.uid() = m.mentor_profile_id OR auth.uid() = m.mentee_profile_id)
    )
  );


-- 7. Tasks Table: Stores tasks assigned within a mentorship (optional)
CREATE TABLE tasks (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  mentorship_id uuid NOT NULL REFERENCES mentorships(id) ON DELETE CASCADE,
  assigned_by_profile_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  assigned_to_profile_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  description TEXT NOT NULL,
  due_date DATE,
  status TEXT NOT NULL CHECK (status IN ('pending', 'in_progress', 'completed')) DEFAULT 'pending',
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Add indexes for faster lookups
CREATE INDEX idx_tasks_mentorship_id ON tasks(mentorship_id);
CREATE INDEX idx_tasks_assigned_to_id ON tasks(assigned_to_profile_id);

-- Trigger to update updated_at on task update
CREATE TRIGGER set_tasks_timestamp
BEFORE UPDATE ON tasks
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Enable RLS for tasks table
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
-- Policy: Users involved in the parent mentorship can manage tasks
CREATE POLICY "Involved users can manage tasks" ON tasks
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM mentorships m
      WHERE m.id = tasks.mentorship_id
      AND (auth.uid() = m.mentor_profile_id OR auth.uid() = m.mentee_profile_id)
    )
  );


-- 8. Job Opportunities Table: Stores job postings (optional)
CREATE TABLE job_opportunities (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  title TEXT NOT NULL,
  company_name TEXT,
  location TEXT,
  description TEXT NOT NULL,
  url TEXT,
  posted_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  tags TEXT[] -- Array of text tags
);

-- Enable RLS for job_opportunities table (adjust policies as needed)
ALTER TABLE job_opportunities ENABLE ROW LEVEL SECURITY;
-- Policy: Allow authenticated users to read job opportunities
CREATE POLICY "Authenticated users can read jobs" ON job_opportunities
  FOR SELECT USING (auth.role() = 'authenticated');
-- Policy: Allow an admin role (or specific users) to create/update/delete jobs (Example, needs 'admin' role setup)
-- CREATE POLICY "Admins can manage jobs" ON job_opportunities
--   FOR ALL USING (is_claims_admin()); -- Requires a custom function is_claims_admin()


-- Pre-populate interests table (Example)
INSERT INTO interests (name) VALUES
  ('Web Development'),
  ('Mobile Development'),
  ('Data Science'),
  ('Machine Learning'),
  ('Blockchain'),
  ('Cybersecurity'),
  ('UI/UX Design'),
  ('Product Management'),
  ('DevOps');
